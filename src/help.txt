import React, { useState, ReactElement } from "react";
import styles from "./items.module.scss";
import Item, { ItemProps } from "../item/item.tsx";
import useSetItemsCategory from "./hooks/useSetItemsCategory.tsx";
import useSetFilterChoose from "./hooks/useSetFilterChoose";
import useSort from "./hooks/useSort.tsx";
import search from "./functions/search.tsx";
import md from "../../assets/MOCK_DATA.json";

interface CartItem {
  product: ItemProps;
  quantity: number;
}

export enum CategoryEnum {
  "No filter" = "No filter",
  "Category" = "Category",
  "Price" = "Price",
  "Uploaded date" = "Uploaded date",
}

const Items: React.FC = () => {
  const [category, setCategory] = useState<string>("");
  const [subcategory, setSubcategory] = useState<CategoryEnum>(
    CategoryEnum["No filter"]
  );
  const alli: CartItem[] = [];
  for (let i = 0; i < md.length; i++) {
    const item = {
      product: md[i],
      quantity: 1,
    };
    alli.push(item);
  }
  const [Items, setItems] = useState<CartItem[]>([]);
  const [sort, setSort] = useState<string>("");
  const [filterChooseSelect, setFilterChooseSelect] = useState<ReactElement>();
  const [filterValue, setFilterValue] = useState<string>("");
  const [searchValue, setSearchValue] = useState<string>("");

  const addItem = (Item: CartItem) => {
    setItems((prevItems) => [...prevItems, Item]);
  };

  useSetItemsCategory(
    addItem,
    subcategory,
    setItems,
    category,
    setSubcategory,
    undefined,
    setFilterChooseSelect
  );
  useSort(Items, sort, setItems);
  useSetFilterChoose(category, undefined, setSubcategory, subcategory);

  const handleSearch = () => {
    if (searchValue === "") {
      setItems(alli);
    } else {
      search(searchValue, setItems, Items, setSort, undefined);
    }
  };

  return (
    <div className={styles.page}>
      <div className={styles.filtersBar}>
        <select
          className={styles.filtersBarItem}
          value={filterValue}
          onChange={(e) => setCategory(e.target.value)}
        >
          {Object.values(CategoryEnum).map((filter) => (
            <option key={filter} value={filter}>
              {filter}
            </option>
          ))}
        </select>
        {filterChooseSelect}
        <select
          className={styles.filtersBarItem}
          value={sort}
          onChange={(e) => setSort(e.target.value)}
        >
          <option value="id">Sort...</option>
          <option value="price">Sort by price</option>
          <option value="date">Sort by uploaded date</option>
        </select>
        <div className={styles.filtersBarItem}>
          <input
            type="text"
            placeholder="Search..."
            value={searchValue}
            onChange={(e) => setSearchValue(e.target.value)}
          />
          <button onClick={handleSearch}>Search</button>
        </div>
      </div>
      <div className={styles.content}>
        {Items.map((item) => (
          <Item key={item.product.id} props={item} />
        ))}
      </div>
    </div>
  );
};

export default Items;





















import { Dispatch, useEffect } from "react";
import md from "../../../assets/MOCK_DATA.json";
import { CategoryEnum } from "../items";

function useSetFilterChoose(
  category: string,
  setFilterOptions: Dispatch<React.SetStateAction<string[]>>,
  setSubcategory: Dispatch<React.SetStateAction<CategoryEnum>>
) {
  useEffect(() => {
    const filterOptions: string[] = [];

    if (category === "Category") {
      const categories = Array.from(new Set(md.map((item) => item.category)));
      filterOptions.push(...categories);
    } else if (category === "Price") {
      const priceJump = 500;
      for (let i = 0; i <= 3; i++) {
        filterOptions.push(`${priceJump * i}-${priceJump * (i + 1)}`);
      }
    } else if (category === "Uploaded date") {
      for (let i = 15; i <= 22; i++) {
        filterOptions.push(`1/1/20${i}`);
      }
    }

    setFilterOptions(filterOptions);
  }, [category, setFilterOptions]);

  useEffect(() => {
    if (category === "Category") {
      setSubcategory("Accessories");
    } else if (category === "Price") {
      setSubcategory("0-500");
    } else if (category === "Uploaded date") {
      setSubcategory("1/1/2015");
    }
  }, [category, setSubcategory]);
}

export default useSetFilterChoose;


















import {
  Dispatch,
  ReactElement,
  SetStateAction,
  useEffect,
} from "react";
import md from "../../../assets/MOCK_DATA.json";
import styles from "../items.module.scss";
import { CartItem } from "../../../App";
import { CategoryEnum } from "../items";

function useSetItemsCategory(
  addItem: (item: CartItem) => void,
  subcategory: string,
  setItems: Dispatch<SetStateAction<CartItem[]>>,
  category: string,
  setSubcategory: Dispatch<SetStateAction<string>>,
  setFilterChooseSelect: Dispatch<SetStateAction<ReactElement | undefined>>
) {
  useEffect(() => {
    // Helper function to filter items based on category and subcategory
    const filterItems = () => {
      const filteredItems: CartItem[] = [];
      for (const i in md) {
        const item: CartItem = {
          product: md[i],
          quantity: 1,
        };

        switch (category) {
          case CategoryEnum["No filter"]:
            filteredItems.push(item);
            break;

          case CategoryEnum.Category:
            if (item.product.category === subcategory) {
              filteredItems.push(item);
            }
            break;

          case CategoryEnum.Price: {
            const [minPrice, maxPrice] = subcategory.split("-").map(Number);
            if (
              item.product.price >= minPrice &&
              item.product.price <= maxPrice
            ) {
              filteredItems.push(item);
            }
            break;
          }

          case CategoryEnum["Uploaded date"]:
            if (
              Date.parse(item.product.uploadedDate) >= Date.parse(subcategory)
            ) {
              filteredItems.push(item);
            }
            break;

          default:
            break;
        }
      }
      setItems(filteredItems);
    };

    // Update items list
    filterItems();

    // Generate filter dropdown for subcategory
    const generateSubcategoryDropdown = () => {
      if (category === CategoryEnum["No filter"]) {
        setFilterChooseSelect(undefined);
        setSubcategory("");
      } else {
        let options: string[] = [];
        if (category === CategoryEnum.Category) {
          options = Array.from(
            new Set(md.map((item) => item.category))
          );
        } else if (category === CategoryEnum.Price) {
          options = ["0-500", "500-1000", "1000-1500", "1500-2000"];
        } else if (category === CategoryEnum["Uploaded date"]) {
          options = ["1/1/2015", "1/1/2016", "1/1/2017", "1/1/2018"];
        }

        setFilterChooseSelect(
          <select
            className={styles.filtersBarItem}
            value={subcategory}
            onChange={(e) => setSubcategory(e.target.value)}
          >
            {options.map((option) => (
              <option key={option} value={option}>
                {option}
              </option>
            ))}
          </select>
        );
      }
    };

    generateSubcategoryDropdown();
  }, [category, subcategory, setItems, setFilterChooseSelect, setSubcategory]);
}

export default useSetItemsCategory;
